openapi: 3.0.0
info:
  title: membes API v2
  version: 1.0.0
servers:
  - url: http://{{authurl}}token
  - url: http://{{baseurl}}token
  - url: http://{{url}}profile
  - url: http://{{url}}events
  - url: http://{{url}}eventsbydaterange
  - url: http://{{url}}
  - url: http://{{url}}forum
  - url: http://{{url}}forumcategories
  - url: http://{{url_api}}
  - url: http://{{url}}news
  - url: http://localhost:8888
  - url: http://{{url}}ads
  - url: http://{{baseurl}}cpdactivitylog
  - url: http://{{url}}cpdactivitylog
  - url: http://{{url}}lookup
  - url: http://{{url}}webhook
  - url: http://{{url}}batch
  - url: http://{{url}}list
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: Token Endpoints
    description: The endpoints here are for token management.
  - name: Profile Endpoints
    description: The endpoints here are profile related features.
  - name: events
  - name: groups
  - name: forum
  - name: news
  - name: cms
  - name: ads
  - name: cpdactivitylog
  - name: lookup
  - name: webhooks
  - name: batch
  - name: list
paths:
  /:
    post:
      tags:
        - cpdactivitylog
      summary: Create CPD Activity Log
      description: >-
        Save a list of activity logs.


        **BODY PARAMETERS**


        | Name | Type | Required | Description |

        | --- | --- | --- | --- |

        | name | string | ✔ | Name of the log. |

        | categoryID | number |  | [Get category
        ID](#e2277150-9802-4dc6-bfb4-4d10c47ebcc9).  <br>Obtained from "API
        References" field in membes Administration > AMS > CPD > Setup > Manage
        Activities. Then select the Activity type this log should be submitted
        to. "API References" can be found towards bottom. |

        | date | string |  | Activity date in dd/mm/yyyy format. |

        | profile | number | ✔ | The profile ID to associate this log. |

        | activity | array |  | [Get activity
        ID](#260dea6a-6b43-4901-84c1-3757aadee6c2)  <br>Obtained from "API
        References" field in membes Administration > AMS > CPD > Setup > Manage
        Activities. Then select the Activity type this log should be submitted
        to. "API References" can be found towards bottom. |

        | points | number |  | Points earned |


        **RESPONSES**


        ``` json

        {
            "data": [
                {
                    "id": 2294
                }
            ],
            "error": false,
            "messages": []
        }


        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - name: api test 2
                  categoryID: 2
                  date: 01/01/2023
                  profile: 1596
                  activity:
                    - 3
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - forum
      summary: Get Forum Categories
      description: |-
        This endpoint retrieves the forum categories for the organisation.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "id": 2,
                    "orgID": 1,
                    "title": "Professional Discussion",
                    "description": "Only for Professionals."
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - cpdactivitylog
      summary: Update CPD Activity Log
      description: |-
        This endpoint updates a list of existing logs.

        **BODY PARAMETERS**

        See [Create log](#e96451e7-e093-4ab7-bb66-36a5b818acfa)

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "id": 2288
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - id: 2288
                  name: cpd activity log 3.3
                  categoryID: 2
                  date: 26/07/2021
                  profile: 1
                  hours: 10
                  points: 100
                  activity:
                    - 3
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /validate/{tokentovalidate}:
    get:
      tags:
        - Token Endpoints
      summary: Validate Token
      description: >-
        Validate a given token. If the token is validated, the token will be
        decoded and return as a json object.  

        The valid property will be set accordingly (true or false).


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | valid | boolean | true or false |
      security:
        - noauthAuth: []
      parameters:
        - name: tokentovalidate
          in: path
          schema:
            type: string
          required: true
          description: The JWT token to be validated
          example: '{{tokentovalidate}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{profileid}/:
    get:
      tags:
        - Profile Endpoints
      summary: Get Profile Detail
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: Profile ID to be retrieved
          example: '{{profileid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Profile Endpoints
      summary: Update Profile
      description: >-
        Update an existing profile.


        **BODY PARAMETERS**


        | Name | Type | Required | Description |

        | --- | --- | --- | --- |

        | firstName | String | ✔ |  |

        | middleName | String |  |  |

        | surname | String | ✔ |  |

        | title | String |  |  |

        | previousName | String |  |  |

        | informalName | String |  |  |

        | email | email |  |  |

        | dob | date |  | Date of birth in yyyy-mm-dd format |

        | phoneWork | String |  |  |

        | phoneWorkCountryCode | String |  | Required if phoneWork exists,
        example: +61 |

        | phoneHome | String |  |  |

        | phoneHomeCountryCode | String |  | Required if phoneHome exists,
        example: +61 |

        | phoneMobile | String |  |  |

        | phoneMobileCountryCode | String |  | Required if phoneMobile exists,
        example: +61 |

        | faxWork | String |  |  |

        | faxWorkCountryCode | String |  | Required if faxWork exists, example:
        +61 |

        | fax | String |  |  |

        | faxCountryCode | String |  | Required if fax exists, example: +61 |

        | joinDate | date |  | In yyyy-mm-dd format. |

        | address1 | AddressObject |  | [See 'Add New
        Profile'](#5645e3bd-fe55-4a1d-ba3d-332d55677385) |

        | address2 | AddressObject |  | [See 'Add New
        Profile'](#5645e3bd-fe55-4a1d-ba3d-332d55677385) |

        | customfields.id | String |  | (**Multi**) Set the custom fields,
        example: "customfields.1": "value" |


        **RESPONSES**


        See [Get Profile Detail endpoint](#96b75267-e3fa-4b94-927a-e34fe929ce0f)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                informalName: testing
                customfields.34: 'Yes'
                sourceID: 31
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: ID of the profile to be updated
          example: '{{profileid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{profileid}/interaction:
    post:
      tags:
        - Profile Endpoints
      summary: Add Profile Interaction
      description: >-
        Add interaction records to a profile.


        **ProfileInteractionObject**


        | Name | Type | Required |

        | --- | --- | --- |

        | title | string | Title of the Interaction |

        | description | string | Description of the interaction |

        | typeid | number | Type of interaction:  <br>Contact Log = 1  <br>Event
        Registration = 2  <br>Email Sent = 3  <br>SMS Sent = 4  <br>Membership =
        5 |


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | status | boolean | true or false |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                [
                    {{ProfileInteractionObject}}
                ]
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: The ID of profile to receive the interaction records.
          example: '{{profileid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{profileid}/interaction/{typeid}/:
    post:
      tags:
        - Profile Endpoints
      summary: Get Profile Interaction
      description: |-
        Get interaction records for a profile.

        | Name | Type | Required |
        | --- | --- | --- |
        | title | string | Title of the Interaction |

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "assignedTo": "",
                    "profileid": 1,
                    "typeid": 5,
                    "invoiceID": "",
                    "actionComplete": 0,
                    "loggedBy": 0,
                    "ref2": "",
                    "id": 11822,
                    "ref1": "",
                    "sentContent": "",
                    "actionBy": "",
                    "loggedDate": "February, 23 2024 11:31:13 +1100",
                    "actionDate": "",
                    "action": "",
                    "title": " Membership Lapsed ",
                    "description": "Membership Status Updated to OnLapsed Status for this Membership Type."
                }
            ],
            "error": false,
            "messages": []
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Membership Lapsed
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: The ID of the profile
          example: '{{profileid}}'
        - name: typeid
          in: path
          schema:
            type: string
          required: true
          description: The interaction type ID
          example: '{{typeid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{profileid}/events:
    get:
      tags:
        - Profile Endpoints
      summary: Get Events of a Profile (last 12 months)
      description: |-
        Get a list of events (past 12 months) for a user.

        **RESPONSES**

        Each event in the array contains the following detail:

        | **Name** | **Type** | **Description** |
        | --- | --- | --- |
        | attended | boolean | Indicate attendance |
        | eventLabel | string | The name of the event |
        | confirmed | number | Indicate confirmation of event subscription |
        | eventID | number | The id of the event |
        | paid | boolean | Indicate if paid |
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: The profile ID of the interactions to be retrieved.
          example: '{{profileid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /search:
    post:
      tags:
        - Profile Endpoints
      summary: Search Profile
      description: >-
        Search for profiles that matches the search criteria. Profile can be
        search base on either:


        - email
            
        - radius from a given location
            
        - custom field
            

        Only one of the search criteria will be used (if more than 1 criteria
        are given, the rest will be ignored).


        **BODY PARAMETERS**


        | Name | Type | Required | Description |

        | --- | --- | --- | --- |

        | email | email |  | The email to search. |

        | typeID | number |  | To filter the search to only individual (1) or
        organisation (2). Only with with email search. |

        | radius | radiusObject |  | The radius detail to search. |

        | customFields | customfieldObject |  | The custom field detail to
        search. |


        **RadiusObjet**


        | Name | Type | Required | Description |

        | --- | --- | --- | --- |

        | location | string | ✔ | A name to establish the radius focal point. |

        | radius | number | ✔ | The radius from the focal point to search. |

        | count | number | ✔ | Number of result required. |


        **CustomfieldObject**


        | Name | Type | Required | Description |

        | --- | --- | --- | --- |

        | id | number | ✔ | The custom field id to search. |

        | value | string | ✔ | The custom field value to search. |


        **RESPONSES**


        An array of profile objects that match the criteria. Each object contain
        the following detail:


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | profilenumber | string | Profile number |

        | informalName | string | Informal name |

        | previousName | string | Previous name |

        | surname | string | Surname |

        | dob | string | Date of birth |

        | companyName | string | Company name |

        | firstName | string | First name |

        | id | number | Profile unique ID |

        | middleName | string | Middle name |

        | membershippaidthrough | string | The profile membership paid through
        date |

        | email | email | emal |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "email": "{{emailtosearch}}",
                    "typeID": 1,
                    "radius": {{RadiusObject}},
                    "customFields": {{CustomfieldObject}}

                }
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{eventid}:
    get:
      tags:
        - events
      summary: Get an Event
      description: |-
        This endpoint will retrieve an event detail by its ID.

        **RESPONSES**

        ``` json
        {
            "data": {
                "memberOnly": 0,
                "cpdPoints": "",
                "registrationOpenFrom": "",
                "typeID": 1,
                "requiresRegistration": 1,
                "timeEnd": "",
                "sectionPostText": "",
                "pageRegistrationsFull": "",
                "code": "NC2",
                "dspEventsCalendar": 1,
                "sectionPreText": "",
                "cpdActivityIDs": "",
                "accountTrackingName2": "Category Two",
                "maxAttendants": 100,
                "orgID": 1,
                "timezone": "",
                "contactEmail": "",
                "promoImage": "",
                "templateid": "",
                "accountTracking2": "0",
                "accountCode": "260",
                "attachmentFile": "",
                "description_more": "",
                "accountTrackingName1": "State Tracking",
                "tradePrice": "",
                "workshopPostText": "",
                "contentCategoryHelper": "",
                "id": 34,
                "socialFunctionPreText": "",
                "cpdActivityID": 3,
                "externalRegistrationURL": "",
                "website": "",
                "homePageTeaser": 1,
                "pricingOptionIDs": "2,4,5",
                "workshopPreText": "",
                "title": "National Conference 2",
                "registrationOpenTill": "",
                "confirmedOnRegIf": "always",
                "authID": "",
                "contactName": "",
                "registrationType": "internal",
                "cpdAcivityID": 0,
                "attachmentText": "",
                "dateStart": "September, 30 2019 00:00:00 +1000",
                "priceAddGST": 1,
                "topic": "National Conference 2",
                "zoomID": "",
                "stateID": 3217,
                "groupID": 0,
                "registrationOpen": 1,
                "requestDietary": 0,
                "description": "National Conference 2",
                "descriptionMore": "",
                "venue": "",
                "dateEnd": "",
                "ccRegNotificationTo": "",
                "zoomAttendanceThreshold": "",
                "websiteText": "",
                "cpdSource": "",
                "tradeRegistrations": 0,
                "contactPhone": "",
                "customFields_profile": "47,42",
                "socialFunctionPostText": "",
                "cpdAutoLog": 0,
                "accountTracking1": "0",
                "customFields_event": "",
                "timeStart": ""
            },
            "error": false,
            "messages": []
        }

         ```
      parameters:
        - name: eventid
          in: path
          schema:
            type: string
          required: true
          description: ID of the event to retrieve
          example: '{{eventid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{eventid}/registration_type:
    get:
      tags:
        - events
      summary: Get Event Registration Type
      description: |-
        This endpoint will retrieve event's registration types by eventID.

        **RESPONSES**

        ``` json
        {
            "data": {
                "registration_type": [
                    {
                        "id": 142,
                        "eventID": 123,
                        "title": "registration type 1",
                        "description": "registration type 1"
                    },
                    {
                        "id": 143,
                        "eventID": 123,
                        "title": "registration type 2",
                        "description": "registration type 2"
                    }
                ],
                "success": true
            },
            "error": false,
            "messages": []
        }

         ```
      parameters:
        - name: eventid
          in: path
          schema:
            type: string
          required: true
          description: ID of the event to retrieve
          example: '{{eventid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /registrationtype:
    post:
      tags:
        - events
      summary: add registration type for an event
      description: |-
        This endpoint will add registration types for an event

        **RESPONSES**

        ``` json
        {
            "data": {
                "registration_type": [
                    {
                        "id": 147,
                        "eventID": 123,
                        "title": "registration type 10",
                        "description": "registration type 10 desc"
                    },
                    {
                        "id": 148,
                        "eventID": 123,
                        "title": "registration type 11",
                        "description": "registration type 11 desc"
                    }
                ],
                "success": true
            },
            "error": false,
            "messages": []
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                eventID: 123
                registration_type:
                  - title: registration type 10
                    description: registration type 10 desc
                  - title: registration type 11
                    description: registration type 11 desc
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /register:
    post:
      tags:
        - events
      summary: register user to event
      description: |-
        This endpoint will retrieve an event detail by its ID.

        **RESPONSES**

        ``` json
        {
            "data": {
                "memberOnly": 0,
                "cpdPoints": "",
                "registrationOpenFrom": "",
                "typeID": 1,
                "requiresRegistration": 1,
                "timeEnd": "",
                "sectionPostText": "",
                "pageRegistrationsFull": "",
                "code": "NC2",
                "dspEventsCalendar": 1,
                "sectionPreText": "",
                "cpdActivityIDs": "",
                "accountTrackingName2": "Category Two",
                "maxAttendants": 100,
                "orgID": 1,
                "timezone": "",
                "contactEmail": "",
                "promoImage": "",
                "templateid": "",
                "accountTracking2": "0",
                "accountCode": "260",
                "attachmentFile": "",
                "description_more": "",
                "accountTrackingName1": "State Tracking",
                "tradePrice": "",
                "workshopPostText": "",
                "contentCategoryHelper": "",
                "id": 34,
                "socialFunctionPreText": "",
                "cpdActivityID": 3,
                "externalRegistrationURL": "",
                "website": "",
                "homePageTeaser": 1,
                "pricingOptionIDs": "2,4,5",
                "workshopPreText": "",
                "title": "National Conference 2",
                "registrationOpenTill": "",
                "confirmedOnRegIf": "always",
                "authID": "",
                "contactName": "",
                "registrationType": "internal",
                "cpdAcivityID": 0,
                "attachmentText": "",
                "dateStart": "September, 30 2019 00:00:00 +1000",
                "priceAddGST": 1,
                "topic": "National Conference 2",
                "zoomID": "",
                "stateID": 3217,
                "groupID": 0,
                "registrationOpen": 1,
                "requestDietary": 0,
                "description": "National Conference 2",
                "descriptionMore": "",
                "venue": "",
                "dateEnd": "",
                "ccRegNotificationTo": "",
                "zoomAttendanceThreshold": "",
                "websiteText": "",
                "cpdSource": "",
                "tradeRegistrations": 0,
                "contactPhone": "",
                "customFields_profile": "47,42",
                "socialFunctionPostText": "",
                "cpdAutoLog": 0,
                "accountTracking1": "0",
                "customFields_event": "",
                "timeStart": ""
            },
            "error": false,
            "messages": []
        }

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                event_id: 123
                profile_id: 1
                registration_type:
                  - 148
                  - 149
                payment_status: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - events
      summary: update user event registration
      description: |-
        This endpoint will retrieve an event detail by its ID.

        **RESPONSES**

        ``` json
        {
            "data": {
                "memberOnly": 0,
                "cpdPoints": "",
                "registrationOpenFrom": "",
                "typeID": 1,
                "requiresRegistration": 1,
                "timeEnd": "",
                "sectionPostText": "",
                "pageRegistrationsFull": "",
                "code": "NC2",
                "dspEventsCalendar": 1,
                "sectionPreText": "",
                "cpdActivityIDs": "",
                "accountTrackingName2": "Category Two",
                "maxAttendants": 100,
                "orgID": 1,
                "timezone": "",
                "contactEmail": "",
                "promoImage": "",
                "templateid": "",
                "accountTracking2": "0",
                "accountCode": "260",
                "attachmentFile": "",
                "description_more": "",
                "accountTrackingName1": "State Tracking",
                "tradePrice": "",
                "workshopPostText": "",
                "contentCategoryHelper": "",
                "id": 34,
                "socialFunctionPreText": "",
                "cpdActivityID": 3,
                "externalRegistrationURL": "",
                "website": "",
                "homePageTeaser": 1,
                "pricingOptionIDs": "2,4,5",
                "workshopPreText": "",
                "title": "National Conference 2",
                "registrationOpenTill": "",
                "confirmedOnRegIf": "always",
                "authID": "",
                "contactName": "",
                "registrationType": "internal",
                "cpdAcivityID": 0,
                "attachmentText": "",
                "dateStart": "September, 30 2019 00:00:00 +1000",
                "priceAddGST": 1,
                "topic": "National Conference 2",
                "zoomID": "",
                "stateID": 3217,
                "groupID": 0,
                "registrationOpen": 1,
                "requestDietary": 0,
                "description": "National Conference 2",
                "descriptionMore": "",
                "venue": "",
                "dateEnd": "",
                "ccRegNotificationTo": "",
                "zoomAttendanceThreshold": "",
                "websiteText": "",
                "cpdSource": "",
                "tradeRegistrations": 0,
                "contactPhone": "",
                "customFields_profile": "47,42",
                "socialFunctionPostText": "",
                "cpdAutoLog": 0,
                "accountTracking1": "0",
                "customFields_event": "",
                "timeStart": ""
            },
            "error": false,
            "messages": []
        }

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                registrant_id: 913
                profile_id: 1
                event_id: 123
                registration_type:
                  - 149
                  - 148
                status: registered
                payment_status: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{startdate}/{enddate}:
    get:
      tags:
        - events
      summary: Get a List of Events by Date Range
      description: |-
        This endpoint will retrieve a list of events within a given date range.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "memberOnly": 0,
                    "cpdPoints": "",
                    "registrationOpenFrom": "",
                    "typeID": 1,
                    "requiresRegistration": 1,
                    "timeEnd": "",
                    "sectionPostText": "",
                    "pageRegistrationsFull": "",
                    "code": "",
                    "dspEventsCalendar": 1,
                    "sectionPreText": "",
                    "cpdActivityIDs": "",
                    "accountTrackingName2": "",
                    "maxAttendants": "",
                    "orgID": 1,
                    "timezone": "Australia/Melbourne",
                    "contactEmail": "",
                    "promoImage": "",
                    "templateid": "",
                    "accountTracking2": "",
                    "accountCode": "",
                    "attachmentFile": "",
                    "description_more": "",
                    "accountTrackingName1": "",
                    "tradePrice": "",
                    "workshopPostText": "",
                    "contentCategoryHelper": "",
                    "id": 105,
                    "socialFunctionPreText": "",
                    "cpdActivityID": 0,
                    "externalRegistrationURL": "",
                    "website": "",
                    "homePageTeaser": 1,
                    "pricingOptionIDs": "2,4",
                    "workshopPreText": "",
                    "title": "New event with timezone",
                    "registrationOpenTill": "",
                    "confirmedOnRegIf": "onpayment",
                    "authID": "",
                    "contactName": "",
                    "registrationType": "internal",
                    "cpdAcivityID": 0,
                    "attachmentText": "",
                    "dateStart": "March, 31 2022 10:35:00 +1100",
                    "priceAddGST": 1,
                    "topic": "",
                    "zoomID": "",
                    "stateID": 0,
                    "groupID": 0,
                    "registrationOpen": 1,
                    "requestDietary": 0,
                    "description": "",
                    "descriptionMore": "",
                    "venue": "",
                    "dateEnd": "",
                    "ccRegNotificationTo": "",
                    "zoomAttendanceThreshold": "",
                    "websiteText": "",
                    "cpdSource": "",
                    "tradeRegistrations": 0,
                    "contactPhone": "",
                    "customFields_profile": "",
                    "socialFunctionPostText": "",
                    "cpdAutoLog": 0,
                    "accountTracking1": "",
                    "customFields_event": "",
                    "timeStart": ""
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: startdate
          in: path
          schema:
            type: string
          required: true
          description: Start date in yyyy-mm-dd format.
        - name: enddate
          in: path
          schema:
            type: string
          required: true
          description: End date in yyyy-mm-dd format.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /groups/events/{groupid}:
    get:
      tags:
        - groups
      summary: Get a list of Event by Group
      description: >-
        This endpoint will retrieve all events that are related to a particular
        group.


        **RESPONSES**


        ``` json

        {
            "data": [
                {
                    "memberOnly": 0,
                    "cpdPoints": "",
                    "registrationOpenFrom": "",
                    "typeID": 3,
                    "requiresRegistration": 1,
                    "timeEnd": "",
                    "sectionPostText": "",
                    "pageRegistrationsFull": "",
                    "code": "",
                    "dspEventsCalendar": 1,
                    "sectionPreText": "",
                    "cpdActivityIDs": "",
                    "accountTrackingName2": "",
                    "maxAttendants": "",
                    "orgID": 1,
                    "timezone": "",
                    "contactEmail": "",
                    "promoImage": "",
                    "templateid": "",
                    "accountTracking2": "",
                    "accountCode": "",
                    "attachmentFile": "",
                    "description_more": "",
                    "accountTrackingName1": "",
                    "tradePrice": "",
                    "workshopPostText": "",
                    "contentCategoryHelper": "",
                    "id": 101,
                    "socialFunctionPreText": "",
                    "cpdActivityID": 0,
                    "externalRegistrationURL": "",
                    "website": "",
                    "homePageTeaser": 1,
                    "pricingOptionIDs": "",
                    "workshopPreText": "",
                    "title": "another with no desscription",
                    "registrationOpenTill": "",
                    "confirmedOnRegIf": "onpayment",
                    "authID": "",
                    "contactName": "",
                    "registrationType": "internal",
                    "cpdAcivityID": 0,
                    "attachmentText": "",
                    "dateStart": "December, 30 2021 00:00:00 +1100",
                    "priceAddGST": 1,
                    "topic": "",
                    "zoomID": "",
                    "stateID": 0,
                    "groupID": 2,
                    "registrationOpen": 1,
                    "requestDietary": 0,
                    "description": "hello",
                    "descriptionMore": "",
                    "venue": "",
                    "dateEnd": "December, 30 2021 00:00:00 +1100",
                    "ccRegNotificationTo": "",
                    "zoomAttendanceThreshold": "",
                    "websiteText": "",
                    "cpdSource": "",
                    "tradeRegistrations": 0,
                    "contactPhone": "",
                    "customFields_profile": "",
                    "socialFunctionPostText": "",
                    "cpdAutoLog": 0,
                    "accountTracking1": "",
                    "customFields_event": "",
                    "timeStart": ""
                }
            ],
            "error": false,
            "messages": []
        }


        ```
      parameters:
        - name: groupid
          in: path
          schema:
            type: string
          required: true
          description: Only event belonging to this group will be retrieved.
          example: '{{groupid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /groups/topics/{groupid}:
    get:
      tags:
        - groups
      summary: Get a list of Forum Topics by Group
      description: >-
        This endpoint retrieve a list of forum topics which are related to a
        particular group.


        **RESPONSES**


        ``` json

        {
            "data": [
                {
                    "profileid": 1,
                    "categoryid": "",
                    "enabled": 1,
                    "attachment": "",
                    "groupID": 1,
                    "id": 3,
                    "orgID": 1,
                    "title": "test 3",
                    "tstamp": "June, 29 2015 20:01:58 +1000",
                    "body": "line 1\r\nline 2\r\n\r\nline 4"
                }
            ],
            "error": false,
            "messages": []
        }


        ```
      parameters:
        - name: groupid
          in: path
          schema:
            type: string
          required: true
          description: Only forum topics of this group will be retrieved.
          example: '{{groupid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /groups/replies/{groupid}:
    get:
      tags:
        - groups
      summary: Get a List of Topic Replies by Group
      description: >-
        This endpoint will retrieve a list of forum replies related to a
        particular group.


        **RESPONSES**


        ``` json

        {
            "data": [
                {
                    "profileid": 190,
                    "enabled": 1,
                    "attachment": "",
                    "id": 1,
                    "orgID": 1,
                    "topicid": 2,
                    "tstamp": "March, 16 2016 16:57:09 +1100",
                    "body": "test"
                }
            ],
            "error": false,
            "messages": []
        }


        ```
      parameters:
        - name: groupid
          in: path
          schema:
            type: string
          required: true
          description: Only forum replies to this group will be retrieved.
          example: '{{groupid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{topicid}:
    get:
      tags:
        - forum
      summary: Get a Forum Topic
      description: |-
        This endpoint retrieve the detail of a forum topic.

        **RESPONSES**

        ``` json
        {
            "data": {
                "profileid": 1,
                "categoryid": "",
                "enabled": 1,
                "attachment": "",
                "groupID": 0,
                "id": 4,
                "orgID": 1,
                "title": "test 4",
                "tstamp": "June, 29 2015 20:12:22 +1000",
                "body": "line 1\r\nline 2\r\n\r\nline 4"
            },
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: topicid
          in: path
          schema:
            type: string
          required: true
          description: ID of the topic to be retrieved
          example: '{{topicid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{topicid}/reply:
    get:
      tags:
        - forum
      summary: Get a List of Forum Topic Replies
      description: |-
        this endpoint retrieves the replies for a particular forum topic.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "profileid": 1,
                    "enabled": 1,
                    "attachment": "",
                    "id": 44,
                    "orgID": 1,
                    "topicid": 4,
                    "tstamp": "September, 13 2021 13:22:16 +1000",
                    "body": "string"
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: topicid
          in: path
          schema:
            type: string
          required: true
          description: Forum replies for this topic will be retrieved.
          example: '{{topicid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - forum
      summary: Add Reply to a Forum Topic
      description: >-
        This endpoint adds a reply to a forum topic.


        **BODY PARAMETERS**


        | Name | Type | Required | Description |

        | --- | --- | --- | --- |

        | body | string | ✔ | Body of the forum topic. |

        | enabled | boolean | ✔ | true/false to enable or disable the forum
        topic. |

        | profileid | number |  | Owner of the topic. |


        **RESPONSES**


        ``` json

        {
            "data": {
                "profileid": 1,
                "enabled": 1,
                "attachment": "",
                "id": 45,
                "orgID": 1,
                "topicid": 4,
                "tstamp": "September, 27 2022 11:27:56 +1000",
                "body": "string"
            },
            "error": false,
            "messages": []
        }


        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                body: string
                enabled: true
                profileid: 1
      parameters:
        - name: topicid
          in: path
          schema:
            type: string
          required: true
          description: ID of a topic for which the reply is to  be added
          example: '{{topicid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /news/{newsid}:
    get:
      tags:
        - news
      summary: Get News
      description: |-
        This endpoint retrieves a news detail.

        **RESPONSES**

        ``` json
        {
            "data": {
                "attachmentText": "",
                "introduction": "cappucin0",
                "pageImage": "",
                "urlText": "",
                "dateExpiry": "November, 05 2024 00:00:00 +1100",
                "datePublish": "April, 27 2020 00:00:00 +1000",
                "attachment": "",
                "url": "http://localhost:8888/news-item//",
                "introImage": "",
                "id": 21,
                "orgID": 1,
                "pageBody": "",
                "title": "new no slack title",
                "body": ""
            },
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: newsid
          in: path
          schema:
            type: string
          required: true
          description: ID of the news to be retrieved.
          example: '{{newsid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /published/{newscount}:
    get:
      tags:
        - news
      summary: Get published News
      description: |-
        This endpoint retrieves a list of published news.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "attachmentText": "",
                    "introduction": "This is the new news introduction",
                    "pageImage": "",
                    "urlText": "",
                    "dateExpiry": "July, 01 2023 00:00:00 +1000",
                    "datePublish": "July, 01 2021 00:00:00 +1000",
                    "attachment": "",
                    "url": "",
                    "introImage": "",
                    "id": 27,
                    "orgID": 1,
                    "pageBody": "",
                    "title": "new news",
                    "body": ""
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      security:
        - bearerAuth: []
      parameters:
        - name: newscount
          in: path
          schema:
            type: string
          required: true
          description: Maximum number if news returned.
          example: '{{newscount}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /all/{newscount}:
    get:
      tags:
        - news
      summary: Get All News
      description: |-
        This endpoint retrieves a list of all news.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "attachmentText": "",
                    "introduction": "",
                    "pageImage": "",
                    "urlText": "",
                    "dateExpiry": "August, 30 2021 00:00:00 +1000",
                    "datePublish": "August, 10 2021 00:00:00 +1000",
                    "attachment": "",
                    "url": "",
                    "introImage": "",
                    "id": 29,
                    "orgID": 1,
                    "pageBody": "",
                    "title": "news item 20210810-1",
                    "body": ""
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: newscount
          in: path
          schema:
            type: string
          required: true
          description: Maximum number of news retrieved.
          example: '{{newscount}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{newsid}:
    post:
      tags:
        - news
      summary: Update a News Item
      description: >-
        This endpoint updates an existing news. Please refer to the [Add
        News](#9a80b6df-ea81-4786-900c-cbf8f05d6472) for the body parameters.


        **RESPONSES**


        ``` json

        {
            "data": [
                {
                    "attachmentText": "",
                    "introduction": "Hello World",
                    "pageImage": "",
                    "urlText": "",
                    "dateExpiry": "November, 05 2024 00:00:00 +1100",
                    "datePublish": "April, 27 2020 00:00:00 +1000",
                    "attachment": "",
                    "url": "http://localhost:8888/news-item//",
                    "introImage": "",
                    "id": 21,
                    "orgID": 1,
                    "pageBody": "",
                    "title": "new no slack title",
                    "body": ""
                }
            ],
            "error": false,
            "messages": []
        }


        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                introduction: Hello World
      parameters:
        - name: newsid
          in: path
          schema:
            type: string
          required: true
          description: ID of the news to be updated.
          example: '{{newsid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/cms/saveTheme:
    post:
      tags:
        - cms
      summary: Save Theme
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                themeid: 1
                css: CSS
                js: The JS
                libs_head: head
                libs_foot: foot
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{adsid}:
    get:
      tags:
        - ads
      summary: Get Employment Ads
      description: |-
        This endpoint retrieves a particular ads.

        **RESPONSES**

        ``` json
        {
            "data": {
                "jobDescriptionPage": "",
                "contactName": "asdfasdf",
                "jobDescription": "sadfasdf",
                "addressState": "adsfasdf",
                "jobCode": "",
                "organisation": "asdfasdf",
                "addressCity": "asdfasdf",
                "fax": "",
                "sentToMembers": "",
                "isEnabled": 0,
                "datePosted": "June, 30 2020 00:00:00 +1000",
                "attachment": "",
                "image": "",
                "scheduledRemoval": "",
                "jobTitle": "asdfasdf",
                "id": 11,
                "addressCountry": "",
                "website": "",
                "accountDetails": "",
                "phone": "asdfasdf",
                "orgID": 1,
                "addressPostcode": "asdfasdf",
                "applicationClosingDate": "August, 20 2020 00:00:00 +1000",
                "address": "asfasdf",
                "email": "asd@sdf.com"
            },
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: adsid
          in: path
          schema:
            type: string
          required: true
          description: ID of the ads to be retrieved.
          example: '{{adsid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /published/{adscount}:
    get:
      tags:
        - ads
      summary: Get Published Employment Ads
      description: |-
        This endpoint retrieves a list of published ads.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "jobDescriptionPage": "This is the page section\r\n",
                    "contactName": "Jason",
                    "jobDescription": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                    "addressState": "vic",
                    "jobCode": "q234",
                    "organisation": "Test Succces",
                    "addressCity": "lkj",
                    "fax": "",
                    "sentToMembers": "",
                    "isEnabled": 1,
                    "datePosted": "July, 01 2018 00:00:00 +1000",
                    "attachment": "",
                    "image": "membes-sig-global1.png",
                    "scheduledRemoval": "",
                    "jobTitle": "asd",
                    "id": 1,
                    "addressCountry": "",
                    "website": "",
                    "accountDetails": "asdf",
                    "phone": "98709780987",
                    "orgID": 1,
                    "addressPostcode": "9870",
                    "applicationClosingDate": "July, 01 2023 00:00:00 +1000",
                    "address": "over thre",
                    "email": "adsf@asdf.com"
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: adscount
          in: path
          schema:
            type: string
          required: true
          description: Max number of ads to be retrieved.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /all/{adscount}:
    get:
      tags:
        - ads
      summary: Get All Employment Ads
      description: |-
        This endpoint retrieves all employment ads up to the max count.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "jobDescriptionPage": "",
                    "contactName": "asdfasdf",
                    "jobDescription": "sadfasdf",
                    "addressState": "adsfasdf",
                    "jobCode": "",
                    "organisation": "asdfasdf",
                    "addressCity": "asdfasdf",
                    "fax": "",
                    "sentToMembers": "",
                    "isEnabled": 0,
                    "datePosted": "June, 30 2020 00:00:00 +1000",
                    "attachment": "",
                    "image": "",
                    "scheduledRemoval": "",
                    "jobTitle": "asdfasdf",
                    "id": 11,
                    "addressCountry": "",
                    "website": "",
                    "accountDetails": "",
                    "phone": "asdfasdf",
                    "orgID": 1,
                    "addressPostcode": "asdfasdf",
                    "applicationClosingDate": "August, 20 2020 00:00:00 +1000",
                    "address": "asfasdf",
                    "email": "asd@sdf.com"
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: adscount
          in: path
          schema:
            type: string
          required: true
          description: Max number of ads to be retrieved.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{profileid}:
    get:
      tags:
        - cpdactivitylog
      summary: Get CPD Activity Log
      description: |-
        This endpoint retrieves a list of CPD logs for a particular profile.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "categoryID": 1,
                    "point1": 9,
                    "customField4": "",
                    "auditStatus": 3,
                    "points5": "",
                    "name": "Test for edit 2",
                    "points4": "",
                    "auditDocsReceived": "",
                    "tstamp": "August, 29 2017 19:25:02 +1000",
                    "auditDocsRequested": "",
                    "points2": "",
                    "customField3": "",
                    "points6": "",
                    "numberOfAttachments": 0,
                    "date": "August, 05 2017 00:00:00 +1000",
                    "reflection": "test1 ",
                    "cycle_id": 12,
                    "customField1": "1234",
                    "point0": 9,
                    "attachment2": "",
                    "customField6": "",
                    "customField5": "",
                    "customField2": "",
                    "points3": "",
                    "attachment1": "logo-invoice.jpg",
                    "activity_id": 3,
                    "id": 2143,
                    "attachment3": "",
                    "event_id": "",
                    "pendingAudit": 0
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: The CPD log for this profile will be retrieved.
          example: '{{profileid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /activities:
    get:
      tags:
        - cpdactivitylog
      summary: Get Available CPD Activities
      description: |-
        This endpoint retrieves a list available CPD activities.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "canSubmitOnline": 1,
                    "minPoints3": 0,
                    "points": "10",
                    "categoryID": 1,
                    "capPoints2": "",
                    "min": 0,
                    "requiresAudit": 0,
                    "capPoints6": "",
                    "capPoints3": "",
                    "capHours": "",
                    "code": "E-T1",
                    "cap": 50,
                    "capPoints4": "",
                    "id": 3,
                    "minHours": 0,
                    "orgID": 1,
                    "capPoints5": "",
                    "title": "Test One",
                    "minPoints5": 0,
                    "minPoints4": 0,
                    "minPoints2": 0,
                    "minPoints6": 0,
                    "explanation": "Test"
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /categories:
    get:
      tags:
        - cpdactivitylog
      summary: Get a list of CPD categories
      description: |-
        This endpoint retrieves a list of CPD categories available.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "referenceID": 1,
                    "orgID": 0,
                    "description": "Endorsed"
                }
            ],
            "error": false,
            "messages": []
        }

        ```
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{profileid}/{logid}:
    delete:
      tags:
        - cpdactivitylog
      summary: Delete a CPD Activity Log
      description: This endpoint delete a log.
      parameters:
        - name: profileid
          in: path
          schema:
            type: string
          required: true
          description: Profile ID whose log is to be deleted
          example: '{{profileid}}'
        - name: logid
          in: path
          schema:
            type: string
          required: true
          description: Log ID to delete.
          example: '{{logid}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /{type}/list:
    get:
      tags:
        - lookup
      summary: Get a list of Countries or States
      description: >-
        Get a list of countries or states with the id to be used in profile
        create and update.


        **RESPONSES**


        ``` json

        {
            "data": [
                {
                    "name": "--",
                    "country_id": 0
                },
                {
                    "name": "Afghanistan",
                    "country_id": 4
                },
                {
                    "name": "Albania",
                    "country_id": 8
                }
            ],
            "error": false,
            "messages": []
        }


        ```
      parameters:
        - name: type
          in: path
          schema:
            type: string
          required: true
          description: Acceptable values are 'Countries' or 'States'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /list:
    get:
      tags:
        - webhooks
      summary: get a list of webhook
      description: |-
        Get a list of urls registered as webhook.

        **RESPONSES**

        ``` json
        {
            "data": [
                {
                    "webHook": "https://webhook.site/8d2323b7-5738-4ed9-9f59-fee4046951ce?num={{{profileNumber}}}&id={{{id}}}&email={{{email}}}&email2={{{email2}}}&name={{{name}}}&surname={{{surname}}}",
                    "id": 18,
                    "type": "profile_create",
                    "orgID": 1
                },
                {
                    "webHook": "https://webhook.site/8d2323b7-5738-4ed9-9f59-fee4046951ce?num={{{profileNumber}}}&id={{{id}}}&email={{{email}}}&email2={{{email2}}}&name={{{name}}}&surname={{{surname}}}",
                    "id": 19,
                    "type": "profile_create",
                    "orgID": 1
                },
                {
                    "webHook": "https://webhook.site/8d2323b7-5738-4ed9-9f59-fee4046951ce?num={{{profileNumber}}}&id={{{id}}}&email={{{email}}}&email2={{{email2}}}&name={{{name}}}&surname={{{surname}}}",
                    "id": 23,
                    "type": "profile_update",
                    "orgID": 1
                },
                {
                    "webHook": "https://webhook.site/8d2323b7-5738-4ed9-9f59-fee4046951ce?num={{{profileNumber}}}&id={{{id}}}&email={{{email}}}&email2={{{email2}}}&name={{{name}}}&surname={{{surname}}}",
                    "id": 25,
                    "type": "profile_update",
                    "orgID": 1
                }
            ],
            "error": false,
            "messages": []
        }

         ```
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /subscribe/{type}:
    post:
      tags:
        - webhooks
      summary: subscribe to a webhook
      description: |-
        Subscribe to a webhook

        **RESPONSES**

        ``` json
        {
            "data": {
                "webHook": "https://your-webhook-url-sample.com",
                "id": 27,
                "type": "profile_update",
                "orgID": 1
            },
            "error": false,
            "messages": []
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                hookUrl: https://your-webhook-url-sample.com
      parameters:
        - name: type
          in: path
          schema:
            type: string
          required: true
          description: Acceptable values are 'profile_update' or 'profile_create'
          example: profile_update
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /unsubscribe/{id}/:
    post:
      tags:
        - webhooks
      summary: unsubscribe from a webhook
      description: |-
        Unsubscribe from a webhook.

        **RESPONSES**

        ``` json
        {
            "data": {},
            "error": false,
            "messages": []
        }

         ```
      requestBody:
        content: {}
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '27'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /profiles/2025-02-03 12:12:12:
    get:
      tags:
        - batch
      summary: profiles
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /profile_interactions/{last_updated}:
    get:
      tags:
        - batch
      summary: profile_interactions
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          example: '10'
        - name: last_updated
          in: path
          schema:
            type: string
          required: true
          example: '2025-02-03 12:12:12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /news/{last_updated}:
    get:
      tags:
        - batch
      summary: news
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          example: '1'
        - name: last_updated
          in: path
          schema:
            type: string
          required: true
          example: '2025-02-03 12:12:12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /invoices/{last_updated}:
    get:
      tags:
        - batch
      summary: invoices
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          example: '1'
        - name: last_updated
          in: path
          schema:
            type: string
          required: true
          example: '2025-02-03 12:12:12'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /profile_interaction_types/{interaction_type_id}:
    get:
      tags:
        - list
      summary: profile_interaction_types
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: interaction_type_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /states/{state_id}:
    get:
      tags:
        - list
      summary: get list of states
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: state_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /countries/{country_id}:
    get:
      tags:
        - list
      summary: get list of countries
      description: >-
        Get a profile's detail.


        **RESPONSES**


        | **Name** | **Type** | **Description** |

        | --- | --- | --- |

        | groups | array | Array of group elements that the profile is in. Each
        element contains the group ID and label |

        | customfields | array | Array of custom field elements. Each element
        contains the custom field id, label, and value. |

        | address | array | Array of addresses. |

        | profile | object | \- profilenumber  <br>\- membershipStatus  <br>\-
        informalName  <br>\- membershipStatusID  <br>\- previousName  <br>\-
        typeID  <br>\- membershipTypeID  <br>\- membershipType  <br>\- surname 
        <br>\- dob  <br>\- companyName  <br>\- firstName  <br>\- id  <br>\-
        middleName  <br>\- membershippaidthrough  <br>\- email  <br>\- joinDate 
        <br>\- faxCountryCode  <br>\- fax  <br>\- phoneHomeCountryCode  <br>\-
        phoneHome  <br>\- phoneWorkCountryCode  <br>\- phoneWork  <br>\-
        phoneMobileCountryCode  <br>\- phoneMobile |
      security:
        - bearerAuth: []
      parameters:
        - name: country_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
